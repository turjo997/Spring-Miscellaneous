#connect minikube with docker . Make sure your docker is running
minikube start --driver=docker

minikube status

#Once starting the minikube , it will create single node cluster. To verify whether it created or not
kubectl cluster-info

#To read local docker repo
minikube docker-env

docker images

#create the docker image
docker build -t springboot-k8s-demo:1.0 .

#deploy the docker image into kubernetes cluster
kubectl create deployment spring-boot-k8s --image=springboot-k8s-demo:1.0 --port-8080

kubectl get deployment

kubectl get deployments

kubectl get node

kubectl describe deployment spring-boot-k8s

kubectl get pods

kubectl get pod

kubectl logs spring-boot-k8s-644f76f6dd-mpgqf

kubectl expose deployment spring-boot-k8s --type=NodePort

kubectl get service

minikube service spring-boot-k8s --url

minikube dashboard

kubectl delete service spring-boot-k8s

kubectl delete deployment spring-boot-k8s

kubectl get deployment

kubectl get pod

kubectl get pods

kubectl get svc

kubectl get service

minikube stop

kubectl get node

kubectl get nodes

minikube delete

#created deployment object using yaml configuration where we tell to kubernetes to take docker image and run it in inside kubernetes pods
kubectl apply -f k8s-deployment.yaml

kubectl apply -f service.yaml

#create service object. with this service object we inform to the kubernetes, expose my application to outside kubernetes cluster so that user can able to #access it
minikube service springboot-k8s-svc

