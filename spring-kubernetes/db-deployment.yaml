# Define a 'Persistent Voulume Claim'(PVC) for Postgres Storage, dynamically provisioned by cluster

#PersistentVolumeClaim (PVC): A PVC allows a Kubernetes pod to request storage dynamically from the cluster.
#Kubernetes will create a Persistent Volume (PV) that can be used by the PostgreSQL pod to persist its data,
#even if the pod restarts or fails.

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: postgres
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
                      #means the volume can be mounted as read/write by a single node.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of postgres server
apiVersion: apps/v1

#A Kubernetes resource that defines how many replicas (instances) of a containerized application
#should be running. It ensures that the desired number of pods are up and running.
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    tier: database

spec:
  #selector.matchLabels: The Deployment will manage all pods that match the app: postgres and tier: database labels.
  selector: # postgres Pod Should contain same labels
    matchLabels:
      app: postgres
      tier: database

  #strategy.type: Recreate: Ensures that old pods are terminated before new ones are created when the Deployment
  #is updated.
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: postgres
        tier: database
    spec:
      containers:
        - image: postgres:latest # image from docker-hub
          args:
            - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: postgres
          env:
            - name: POSTGRES_PASSWORD
              value: root    # The password for the PostgreSQL root user
            - name: POSTGRES_DATABASE
              value: mydatabase  # Name of the database to be created
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:        # Mounting volume obtained from Persistent Volume Claim .
                              # Mount the PVC to this container
            - name: postgres-persistent-storage
              mountPath: D:\postgres_data:/var/lib/postgresql/data # /var/lib/postgresql/data  # This is the path in the container on which the mounting will take place.
                                         #The path where PostgreSQL stores its data inside the container
      volumes:
        - name: postgres-persistent-storage # Obtaining 'vloume' from PVC
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
# Define a 'Service' To Expose postgres to Other Services
# Service: Exposes PostgreSQL pod to other services in the Kubernetes cluster.
# In this case, it acts as an internal service.

apiVersion: v1
kind: Service
metadata:
  name: postgres  # DNS name
  labels:
    app: postgres
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:       # postgres Pod Should contain same labels . The service will route traffic to pods
                  # that match the labels app: postgres and tier: database.
    app: postgres
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant